module kb.

import shapes.
import sat. % for #>

kb(Freight) => Freight = [meal,groceries,person,pallet,container,car,truck,steel,special_freight].

kb(Carrier) => Carrier = [courier,scooter,bike,taxi,car,bus,truck,car_carrier,train,ship,airplaine, special_transport].

m(meal, [courier]).
m(person, [scooter,bike,taxi,car,bus,train,ship,airplane]).
m(pallet, [truck]).
m(trolley, [truck]).
m(container, [truck,train,ship]).
m(car, [car_carrier,train,ship]).
m(truck, [train,ship]).
m(special_freight, [special_transport]).

trolley([name,l,w,h,kg_max],
  'https://logimarkt.com/metal-transport-trolleys-for-logistics/').
trolley(shelving_roll_trolley1,0.9,0.8,1.9,500).
trolley(nestable_roll_trolley1,1.4,1.1,1.1,500).

pallet([name,l,w,h,kg_max],
  'https://en.wikipedia.org/wiki/Pallet').
pallet(pallet_us1,1.2,1.1,910).
pallet(pallet_eu1,1.2,0.8,910).

container([name,l,w,h,kg_max],
  'https://en.wikipedia.org/wiki/Intermodal_container').
container(container20foot1, 6.1,2.5,2.6,30000).
container(container40foot1,12.2,2.5,2.6,33000).

% food delivery food(name,L,W,H,Kg)
food(family_pizza,0.5,0.5,0.03,0.2).
food(coke,0.2,0.2,0.5,1.5).

scooter(courier1,10,[cooler(0.5,0.5,0.5,loc(1,1,0))]).

truck([name,kg_max,slots,url]).
truck(ford_transit,2000,[slot1(4,2,2)],'https://en.wikipedia.org/wiki/Ford_Transit#2020_update').
truck(mercedes_sprinter,2000,[slot1(4,2,2)]).

% car(Model,L,W,H)
% dimensions rounded to higher value with 0.1 m tolerance.
car(opel_corsa   , 4.1, 1.8, 1.5).
car(peugeot_308  , 4.3, 1.8, 1.5).
car(peugeot_3008 , 4.5, 1.8, 1.7).
car(toyota_proace, 5.0, 1.8, 1.9).
car(toyota_yaris , 4.0, 1.8, 1.6).
car(toyota_c_hr  , 4.4, 1.8, 1.6).
car(bmw_serie_4  , 4.8, 1.8, 1.4).
car(citroen_c4   , 4.5, 1.8, 1.7).

% car carrier cc(Name,MaxWeight, Slots) with slotname(L,H,loc(X,Y,Angle))
% the slot ordering implies the default filling order
cc(carrier1,1000,[slot1(4.5,1.5,loc(3,1,0))]).
cc(carrier2,2000,[slot1(4.5,1.5,loc(3,3,0)), slot2(4.5,1.5,loc(3,1,0))]).
cc(carrier3,3000,[slot1(4.5,1.5,loc(3,3,0)), slot2(4.5,1.5,loc(3,1,0)), slot3(5.0,2.0,loc(5,1,3))]).
cc(carrier6,6000,[slot1(4.5,1.5,loc(3.3,0)), slot2(4.5,1.5,loc(3,1,0)), slot3(5.0,2.0,loc(5,1,3)),
                  slot4(4.5,1.5,loc(8,3,0)), slot5(4.5,1.5,loc(8,1,0)), slot6(5.0,2.0,loc(12,1,0))]).

% car(ShortestCar,Length1,_,_), \+  (car(_,Length2,_,_), Length2 < Length1). % options: \+ or not
% car(MaxL       ,L1     ,_,_), not (car(_,L2     ,_,_), L2      > L1     ).

% L = findall(X,member(X,[1,2,3])) % [1,2,3]
% Foos = findall(foo(C,bar), member(C,[car1,car2,car3])). % [foo(car1,bar), ...]
% Slots = findall(S, slot(carrier3,S))

foo_facts =>
   F = findall(foo(a,X,2), member(X, [1,2,3])), % [foo(a,1,2), foo(a,2,2), foo(a,3,2)]
   Fs = $F, cl_facts(Fs, [$foo(+,-,-)]). % instantiation; testing foo(Bar,_,_)

cars =>
 car(Model,Lc,_,Hc),
 writef("\n %w %w %w",Model,Lc,Hc).

carriers =>
 cc(Carrier,KgMax,Slots),
 writef("\n %w %w %w",Carrier,KgMax,Slots).

kbcar ?=> cars, fail.
kbcar => println(" ok").
kbcc ?=> carriers, fail.
kbcc => println(" ok").

% unique slots & cars
% slot2(carrier1) > false
% slot2(carrier2) > true
slot2(Carrier) =>
        cc(Carrier,_,Ss),
        %cc(carrier2,_,Ss),
        member(S1,Ss),
        member(S2,Ss),
        S1 != S2,
        writef("\n %w %w",S1,S2).

slot(Carrier,Sl) =>
        cc(Carrier,_,Slots),
        member(Sl,Slots).

dim(Carrier,Slot,L,H,Loc)  =>
  slot(Carrier,Sl),
  Sl =.. S,
  Slot = S[1],
  L = S[2],
  H = S[3],
  Loc = S[4].

match(Carrier,Model) =>
 dim(Carrier,Sl,L,H,Loc),
 car(Model,Lc,_,Hc),
 Lc =< L,
 Hc =< H,
 writef("\n %w %w %w/%w %w: %w %w/%w",Carrier,Sl,L,H,Loc, Model,Lc,Hc),
 fail.
