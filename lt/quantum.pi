% quantum.pi 
% Creates Agents, Cargo, Lanes configuration
% from raw facts for PDP optimizer, bundle_quantum.pi 

% http://retina.inf.ufsc.br/picat_guide/
% Picat> F = findall(foo(X), member(X,[1,2,3]))

% Picat> F = findall(foo(A,B,C), agent(A,B,C) )
% F = [foo(ag01,cr01,l01),foo(ag02,cr02,l01),foo(ag03,cr03,l01)]

% Picat> F = findall([C,[],C,6], agent(A,_,C) )
% F = [[l01,'[]',l01,6],[l01,'[]',l01,6],[l01,'[]',l01,6]]

% F = findall(lane(A,B,2), cargo(_,_,A,B))

%  dist(LatA,LonA,LatB,LonB, Dist) =>  Dist = round(10*(abs(LatA-LatB)+ abs(LonA-LonB))).
% F = findall(lane(A,B,D), (cargo(_,_,A,B),loc(A,_,LatA,LonA,_), loc(B,_,LatB,LonB,_),dist(LatA,LonA,LatB,LonA,D)))
% lane(l14,l29,470)]

module quantum. 
import math. % to_radians
import sat. % for #>
import bundle_conf. % facts from the API call

% L = findall(X,member(X,[1,2,3])) % [1,2,3]
% Foos = findall(foo(C,bar), member(C,[car1,car2,car3])). % [foo(car1,bar), ...]
% Slots = findall(S, slot(carrier3,S))

foo_facts =>
   F = findall(foo(a,X,2), member(X, [1,2,3])), % [foo(a,1,2), foo(a,2,2), foo(a,3,2)]
   Fs = $F, cl_facts(Fs, [$foo(+,-,-)]). % instantiation; testing foo(Bar,_,_)


do_lanes0 =>
  F = findall(lane(A,B,2), cargo(_,_,A,B)),
  Fs = $F, cl_facts(Fs, [$lane(+,-,-)]).

dist(LatA,LonA,LatB,LonB,Dist) =>
  Lat1 = to_radians(LatA), Lon1 = to_radians(LonA),
  Lat2 = to_radians(LatB), Lon2 = to_radians(LonB),
  LonD = Lon2-Lon1, LatD = Lat2-Lat1,
  A = pow(sin(LatD/2),2) + cos(Lat1) * cos(Lat2) * pow(sin(LonD/2),2),
  C = 2 * atan2(sqrt(A), sqrt(1-A)),
  R = 6373.0,
  Dist = round(R*C).

do_lanes =>
  F = findall(lane(A,B,D), (cargo(_,_,A,B),
                            loc(A,_,LatA,LonA,_), 
                            loc(B,_,LatB,LonB,_), 
                            dist(LatA,LonA,LatB,LonA,D))),
  Fs = $F, cl_facts(Fs, [$lane(+,-,-)]).

% F = findall(lane(A,B,D), lane(A,B,D))


% Configure Agents, Cargo, Lanes

conf_agents(Agents) => Agents = findall([Loc,[],6,Name], agent(Name,_,Loc)).

conf_cargo(Cargo) => Cargo = findall((A,B), cargo(_,_,A,B)).

conf_lanes(Lanes) => Lanes =
    findall(lane(A,B,D), (cargo(_,_,A,B),
                          loc(A,_,LatA,LonA,_),
                          loc(B,_,LatB,LonB,_),
                          dist(LatA,LonA,LatB,LonA,D))).
